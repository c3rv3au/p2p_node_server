{
  "name": "auto-updater",
  "description": "Automatically updates your client version when is outdated by the repository",
  "version": "0.0.7",
  "author": {
    "name": "@Juampi_92",
    "url": "https://github.com/juampi92"
  },
  "main": "./auto-updater",
  "dependencies": {
    "adm-zip": "*"
  },
  "keywords": [
    "auto-updater",
    "automatic",
    "auto",
    "update",
    "updater"
  ],
  "bugs": {
    "url": "https://github.com/juampi92/auto-updater/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/juampi92/auto-updater.git"
  },
  "license": "GPL-2.0",
  "engines": {
    "node": "*"
  },
  "readme": "# Auto-Updater\r\n\r\n[Node.js](http://nodejs.org/) auto-update plugin.\r\n\r\n# Installation\r\n\t\r\nWith [npm](http://npmjs.org) do:\r\n\r\n    $ npm install auto-updater\r\n\r\n# What does it do?\r\n\r\n * Compares local version with remote version.\r\n * If versions dont match, it downloads the repository.\r\n * It extracts the repository, overwriting the modifies files.\r\n * Compares local dependencies with remote dependencies and tells if they don't match.\r\n\r\n# Events\r\n\r\n * `git-clone` The user has a git clone. Recommend use the \"git pull\" command\r\n * `check-up-to-date ( v )` versions match\r\n * `check-out-dated ( v_old , v)` versions dont match\r\n * `update-downloaded` Update downloaded in the machine\r\n * `update-not-installed` Update was already in the dir, so it wasnt installed\r\n * `extracted` The update has been extracted correctly.\r\n * `download-start ( name )` The download of \"name of the update\" has started\r\n * `download-update ( name , % )` The download has been updated. New percentage\r\n * `download-end ( name )` The download has ended\r\n * `download-error ( err )` Something happened to the download\r\n * `end` Called when all is over ( along with 'check-up-to-date' if there are no updates, or with 'extracted' if it was installed )\r\n\r\n# Public Methods:\r\n\r\n * `init ( opc )`\r\n   * `pathToJson: ''` from repo main folder to package.json (only subfolders. Can't go backwards)\r\n   * `async: true` Currently not sync supported.\r\n   * `silent: false` Does not trigger events\r\n   * `autoupdate: false` if true, all stages run one after the other. Else, you need to force the stages with the force methods\r\n   * `check_git: true` Checks if the .git folder exists, so its a dev and doesnt download the proyect.\r\n\r\n * `on ( event, callback )` Sets the events\r\n\t\t\r\n * `checkDependencies()` Returns bool if client has all the remote dependencies. Undefined if they weren't checked yet (need forceCheck first)\r\n * `diffDependencies()` Returns an array of dependencies (only the names) that dont match\r\n\r\n * `forceCheck ()` Compares the two versions. Triggers: 'git-clone','check-up-to-date','check-out-dated'\r\n * `forceDownloadUpdate()` Downloads the update. Triggers: 'update-downloaded','update-not-installed','download-*'\r\n * `forceExtract()` Extracts (or installs) the update reeplacing old files (it doesnt delete untracked files). Triggers: 'extracted'\r\n\r\nWarning: do not run this methods in other order.\r\n\r\n# Package.json configuration\r\n\t\r\n\t\"version\":\"0.0.1\",\r\n\t\"auto-updater\":{\r\n\t\t\"repo\":\"/github-user/github-repo\",\r\n\t\t\"branch\":\"master\"\r\n\t}\r\n\r\nThat segment must be added to the proyect (local). It is critical that the package.json of the app you are using has a version field (so it can be compared with the remote package.json stored on github), and the auto-updater field, so it knows where to get the remote data.\r\n\r\n# Example\r\n```javascript\r\n\tvar autoupdater = require('./lib/auto-updater.js')({\r\n\t\tpathToJson: '',\r\n\t\tasync: true,\r\n\t\tsilent: false,\r\n\t\tautoupdate: false,\r\n\t\tcheck_git: true\r\n\t});\r\n\r\n\t// State the events\r\n\tautoupdater.on('git-clone',function(){\r\n\t  console.log(\"You have a clone of the repository. Use 'git pull' to be up-to-date\");\r\n\t});\r\n\tautoupdater.on('check-up-to-date',function(v){\r\n\t  console.log(\"You have the latest version: \" + v);\r\n\t});\r\n\tautoupdater.on('check-out-dated',function(v_old , v){\r\n\t  console.log(\"Your version is outdated. \"+v_old+ \" of \"+v);\r\n\t  autoupdater.forceDownloadUpdate(); // If autoupdate: false, you'll have to do this manually.\r\n\t  // Maybe ask if the'd like to download the update.\r\n\t});\r\n\tautoupdater.on('update-downloaded',function(){\r\n\t  console.log(\"Update downloaded and ready for install\");\r\n\t  autoupdater.forceExtract(); // If autoupdate: false, you'll have to do this manually.\r\n\t});\r\n\tautoupdater.on('update-not-installed',function(){\r\n\t  console.log(\"The Update was already in your folder! It's read for install\");\r\n\t  autoupdater.forceExtract(); // If autoupdate: false, you'll have to do this manually.\r\n\t});\r\n\tautoupdater.on('extracted',function(){\r\n\t  console.log(\"Update extracted successfully!\");\r\n\t  console.log(\"RESTART THE APP!\");\r\n\t});\r\n\tautoupdater.on('download-start',function(name){\r\n\t  console.log(\"Starting downloading: \" + name);\r\n\t});\r\n\tautoupdater.on('download-update',function(name,perc){\r\n\t  process.stdout.write(\"Downloading \" + perc + \"% \\033[0G\");\r\n\t});\r\n\tautoupdater.on('download-end',function(name){\r\n\t  console.log(\"Downloaded \" + name);\r\n\t});\r\n\tautoupdater.on('download-error',function(err){\r\n\t  console.log(\"Error when downloading: \" + err);\r\n\t});\r\n\tautoupdater.on('end',function(){\r\n\t  console.log(\"The app is ready to function\");\r\n\t});\r\n\r\n\t// Start checking\r\n\tautoupdater.forceCheck();\r\n```\r\n\r\n# Dependencies\r\n * [Adm-zip](https://github.com/cthackers/adm-zip)",
  "readmeFilename": "README.md",
  "_id": "auto-updater@0.0.7",
  "dist": {
    "shasum": "cf661a4c63cd10dfeb3a3f1cd22ef266d9380830"
  },
  "_from": "auto-updater@",
  "_resolved": "https://registry.npmjs.org/auto-updater/-/auto-updater-0.0.7.tgz"
}
